#!/usr/bin/python3

from pathlib import Path
from typing import TYPE_CHECKING, Any, Optional

import subprocess

import archinstall
from archinstall import info, debug
from archinstall import SysInfo
from archinstall import locale
from archinstall import disk
from archinstall.lib.global_menu import GlobalMenu
from archinstall.lib.configuration import ConfigurationOutput
from archinstall.lib.installer import Installer
from archinstall.lib.models import AudioConfiguration, Bootloader
from archinstall.lib.models.network_configuration import NetworkConfiguration
from archinstall.lib.pacman import Pacman
from archinstall.lib.profile.profiles_handler import profile_handler
from archinstall import profile
from archinstall.default_profiles.minimal import MinimalProfile
from archinstall.lib.interactions.general_conf import ask_chroot
from archinstall.tui import Tui
from simple_term_menu import TerminalMenu

bundles = {
    "Caja": ["caja", "gstreamer"],
    "Nautilus": ["nautilus"],
    "Nemo": ["nemo"],
    "PCManFM": ["pcmanfm-gtk3", "gvfs", "xarchiver"],
    "Thunar": ["thunar", "catfish", "gvfs", "tumbler", "thunar-volman", "thunar-archive-plugin",
               "thunar-media-tags-plugin"],

    "Emacs": ["emacs"],
    "gedit": ["gedit", "gedit-plugins"],
    "Geany": ["geany", "geany-plugins"],
    "Mousepad": ["mousepad", "gspell"],
    "typobuster": ["typobuster", "gspell", "hunspell", "hunspell-en_US"],
    "Vim": ["vim"],

    "Chromium": ["chromium"],
    "Epiphany": ["epiphany"],
    "Firefox": ["firefox"],
    "Midori": ["midori", "gst-libav", "gst-plugins-base", "gst-plugins-good"],
    "Opera": ["opera", "opera-ffmpeg-codecs"],
    "qutebrowser": ["qutebrowser", "pdfjs", "python-adblock"],
    "Vivaldi": ["vivaldi", "vivaldi-ffmpeg-codecs"],

    "Extra GTK themes": ["nordic-polar-theme", "otis-theme-git"],
    "Extra cursor themes": ["xcursor-vanilla-dmz"],

    "Modify": ["This will add the '--unsupported-gpu' argument in the sway.desktop file."],
    "Skip": ["This will do nothing."]
}

modify_sway_desktop = False


def select_applications():
    apps = []
    items = ["Thunar", "Caja", "Nautilus", "Nemo", "PCManFM"]
    t_menu = TerminalMenu(items, title="Select file manager (Esc to skip):", clear_screen=True,
                          status_bar="Selection is mandatory. If skipped, Thunar will be installed.",
                          preview_command=preview_cmd, preview_title="Packages")
    menu_entry_index = t_menu.show()
    if not menu_entry_index:
        menu_entry_index = 0
    append_if_absent(apps, bundles[items[menu_entry_index]])

    items = ["typobuster", "Mousepad", "Emacs", "gedit", "Geany"]
    t_menu = TerminalMenu(items, title=["Select text editor (Esc to skip):"], clear_screen=True,
                          status_bar="Selection is mandatory. If skipped, typobuster (nwg-shell native editor) will be installed.",
                          preview_command=preview_cmd, preview_title="Packages")
    menu_entry_index = t_menu.show()
    if not menu_entry_index:
        menu_entry_index = 0
    append_if_absent(apps, bundles[items[menu_entry_index]])

    items = ["Firefox", "Chromium", "Epiphany", "Midori", "Opera", "qutebrowser", "Vivaldi"]
    t_menu = TerminalMenu(items, title=["Select web browser (Esc to skip):"], clear_screen=True,
                          status_bar="Selection is mandatory. If skipped, Firefox will be installed.",
                          preview_command=preview_cmd, preview_title="Packages")
    menu_entry_index = t_menu.show()
    if not menu_entry_index:
        menu_entry_index = 0
    append_if_absent(apps, bundles[items[menu_entry_index]])

    output = subprocess.check_output("lspci").decode("utf-8").splitlines()
    vga = ""
    for line in output:
        if "VGA" in line.upper():
            vga = line
            break
    if "NVIDIA" in vga.upper():
        items = ["Modify", "Skip"]
        t_menu = TerminalMenu(items, title=["Modify sway.desktop (Esc to skip)?"], clear_screen=True,
                              status_bar="Nvidia GPU detected. Do you want to modify the sway.desktop file?",
                              preview_command=preview_cmd, preview_title="Nvidia GPU")
        menu_entry_index = t_menu.show()
        if not menu_entry_index:
            menu_entry_index = 1
        global modify_sway_desktop
        modify_sway_desktop = menu_entry_index == 0

    items = ["Extra GTK themes", "Extra cursor themes"]
    t_menu = TerminalMenu(items, title=["Select extras (Esc to skip):"], clear_screen=True, multi_select=True,
                          show_multi_select_hint=True, multi_select_select_on_accept=False, multi_select_empty_ok=True,
                          preview_command=preview_cmd, preview_title="Packages")
    t_menu.show()
    if t_menu.chosen_menu_entries is not None:
        for item in t_menu.chosen_menu_entries:
            append_if_absent(apps, bundles[item])

    return apps


def append_if_absent(dst, src):
    for item in src:
        if item not in dst:
            dst.append(item)


def preview_cmd(arg):
    return ' '.join(bundles[arg])


if TYPE_CHECKING:
    _: Any

if archinstall.arguments.get('help'):
    print("See `man archinstall` for help.")
    exit(0)


def ask_user_questions():
    """
    First, we'll ask the user for a bunch of user input.
    Not until we're satisfied with what we want to install
    will we continue with the actual installation steps.
    """

    with Tui():
        global_menu = GlobalMenu(data_store=archinstall.arguments)

        global_menu.disable_all()

        global_menu.set_enabled('archinstall-language', True)
        global_menu.set_enabled('mirror_config', True)
        global_menu.set_enabled('locale_config', True)
        global_menu.set_enabled('disk_config', True)
        global_menu.set_enabled('disk_encryption', True)
        global_menu.set_enabled('bootloader', True)
        global_menu.set_enabled('uki', True)
        global_menu.set_enabled('swap', True)
        global_menu.set_enabled('hostname', True)
        global_menu.set_enabled('!root-password', True)
        global_menu.set_enabled('!users', True)
        global_menu.set_enabled('audio_config', True)
        global_menu.set_enabled('kernels', True)
        global_menu.set_enabled('packages', True)
        global_menu.set_enabled('timezone', True)
        global_menu.set_enabled('ntp', True)
        global_menu.set_enabled('additional-repositories', True)
        global_menu.set_enabled('install', True)
        global_menu.set_enabled('abort', True)

        if not archinstall.arguments.get('advanced', False):
            global_menu.set_enabled('parallel downloads', False)

        global_menu.run()


def perform_installation(mountpoint: Path):
    """
    Performs the installation steps on a block device.
    Only requirement is that the block devices are
    formatted and setup prior to entering this function.
    """
    info('Starting installation')
    disk_config: disk.DiskLayoutConfiguration = archinstall.arguments['disk_config']

    # Retrieve list of additional repositories and set boolean values appropriately
    enable_testing = 'testing' in archinstall.arguments.get('additional-repositories', [])
    enable_multilib = 'multilib' in archinstall.arguments.get('additional-repositories', [])
    run_mkinitcpio = not archinstall.arguments.get('uki')
    locale_config: locale.LocaleConfiguration = archinstall.arguments['locale_config']
    disk_encryption: disk.DiskEncryption = archinstall.arguments.get('disk_encryption', None)

    with Installer(
            mountpoint,
            disk_config,
            disk_encryption=disk_encryption,
            kernels=archinstall.arguments.get('kernels', ['linux'])
    ) as installation:
        # Mount all the drives to the desired mountpoint
        if disk_config.config_type != disk.DiskLayoutType.Pre_mount:
            installation.mount_ordered_layout()

        installation.sanity_check()

        if disk_config.config_type != disk.DiskLayoutType.Pre_mount:
            if disk_encryption and disk_encryption.encryption_type != disk.EncryptionType.NoEncryption:
                # generate encryption key files for the mounted luks devices
                installation.generate_key_files()

        if mirror_config := archinstall.arguments.get('mirror_config', None):
            installation.set_mirrors(mirror_config, on_target=False)

        installation.minimal_installation(
            testing=enable_testing,
            multilib=enable_multilib,
            mkinitcpio=run_mkinitcpio,
            hostname=archinstall.arguments.get('hostname', 'archlinux'),
            locale_config=locale_config
        )

        if mirror_config := archinstall.arguments.get('mirror_config', None):
            installation.set_mirrors(mirror_config, on_target=True)

        if archinstall.arguments.get('swap'):
            installation.setup_swap('zram')

        if archinstall.arguments.get("bootloader") == Bootloader.Grub and SysInfo.has_uefi():
            installation.add_additional_packages("grub")

        installation.add_bootloader(
            archinstall.arguments["bootloader"],
            archinstall.arguments.get('uki', False)
        )

        # If user selected to copy the current ISO network configuration
        # Perform a copy of the config
        network_config: Optional[NetworkConfiguration] = archinstall.arguments.get('network_config', None)

        if network_config:
            network_config.install_network_config(
                installation,
                archinstall.arguments.get('profile_config', None)
            )

        if users := archinstall.arguments.get('!users', None):
            installation.create_users(users)

        audio_config: AudioConfiguration | None = archinstall.arguments.get('audio_config', None)
        if audio_config:
            audio_config.install_audio_config(installation)
        else:
            info("No audio server will be installed")

        if archinstall.arguments.get('packages', None) and archinstall.arguments.get('packages', None)[0] != '':
            installation.add_additional_packages(archinstall.arguments.get('packages', None))

        installation.add_additional_packages(
            ['networkmanager', 'iwd', 'nano', 'file-roller', 'xdg-user-dirs', 'udisks2', 'otf-font-awesome',
             'nwg-iso-stuff', 'fastfetch', 'nwg-hello', 'swayimg', 'hyprland', 'nwg-dock-hyprland',
             'xdg-desktop-portal-hyprland', 'nwg-shell'
             'gspell', 'hunspell', 'hspell', 'nuspell', 'aspell' 'libvoikko'])

        # Install previously selected applications
        info(f'Installing selected: {" ".join(applications)}')
        installation.add_additional_packages(applications)

        profile_config = profile.ProfileConfiguration(MinimalProfile())
        profile.profile_handler.install_profile_config(installation, profile_config)

        if timezone := archinstall.arguments.get('timezone', None):
            installation.set_timezone(timezone)

        if archinstall.arguments.get('ntp', False):
            installation.activate_time_synchronization()

        if archinstall.accessibility_tools_in_use():
            installation.enable_espeakup()

        if (root_pw := archinstall.arguments.get('!root-password', None)) and len(root_pw):
            installation.user_set_pw('root', root_pw)

        # This step must be after profile installs to allow profiles_bck to install language pre-requisites.
        # After which, this step will set the language both for console and x11 if x11 was installed for instance.
        installation.set_keyboard_language(locale_config.kb_layout)

        if profile_config := archinstall.arguments.get('profile_config', None):
            profile_config.profile.post_install(installation)

        # If the user provided a list of services to be enabled, pass the list to the enable_service function.
        # Note that while it's called enable_service, it can actually take a list of services and iterate it.
        if archinstall.arguments.get('services', None):
            installation.enable_service(archinstall.arguments.get('services', []))

        installation.enable_service(['NetworkManager.service', 'iwd.service'])

        # If the user provided custom commands to be run post-installation, execute them now.
        if archinstall.arguments.get('custom-commands', None):
            archinstall.run_custom_user_commands(archinstall.arguments['custom-commands'], installation)

        installation.genfstab()

        virt = ""
        try:
            virt = subprocess.check_output(["systemd-detect-virt"]).decode("utf-8")
        except subprocess.CalledProcessError:
            pass
        if virt:
            info("\nVirtual machine detected.\n")
            installation.arch_chroot("sed -i '/^$/a export WLR_NO_HARDWARE_CURSORS=1' /etc/profile")
            if "oracle" in virt:
                info("Installing VirtualBox guest utils")
                installation.add_additional_packages(['virtualbox-guest-utils'])
                installation.enable_service(['vboxservice.service'])

        # add pacman download animation
        installation.arch_chroot("sudo sed -i '/# Misc options/a ILoveCandy' /etc/pacman.conf")

        # allow starting sway on Nvidia GPU
        if modify_sway_desktop:
            installation.arch_chroot(
                "sudo sed -i 's/^Exec=sway$/Exec=sway --unsupported-gpu/' /usr/share/wayland-sessions/sway.desktop")

        # set write permissions to nwg-hello cache file
        installation.arch_chroot("chown greeter /var/cache/nwg-hello/cache.json")
        installation.arch_chroot("chmod u+rw /var/cache/nwg-hello/cache.json")

        info("\nModifying per user configs")
        for user in users:
            # add users to 'video' group
            installation.arch_chroot(f"usermod -aG video '{user.username}'")
            # copy fastfetch config
            installation.arch_chroot("mkdir -p ~/.config/fastfetch", run_as=user.username)
            installation.arch_chroot("cp /etc/nwg/config.jsonc ~/.config/fastfetch/", run_as=user.username)
            # append aliases
            installation.arch_chroot("echo 'alias cls=clear' >> ~/.bashrc", run_as=user.username)
            # append fastfetch
            installation.arch_chroot("echo 'fastfetch' >> ~/.bashrc", run_as=user.username)
            # initialize xdg-user-dirs
            installation.arch_chroot("xdg-user-dirs-update", run_as=user.username)

            # initialize nwg-shell configs
            installation.arch_chroot(f"nwg-shell-installer -w -hypr -s -k {locale_config.kb_layout}",
                                     run_as=user.username)

        installation.enable_service(['greetd.service'])

        info("\nYour computer will now restart.\n")

        subprocess.Popen("/usr/bin/reboot", shell=True)

    debug(f"Disk states after installing: {disk.disk_layouts()}")


info("Checking connection...")
try:
    Pacman.run("-Sy")
except Exception as e:
    info(f'Arch Linux mirrors are not reachable. Please check your internet connection')
    exit(1)

ask_user_questions()

# file manager, text editor, browser, display manager, extras; also asks whether to modify the sway.desktop file
applications = select_applications()

fs_handler = disk.FilesystemHandler(
    archinstall.arguments['disk_config'],
    archinstall.arguments.get('disk_encryption', None)
)

fs_handler.perform_filesystem_operations()

perform_installation(archinstall.storage.get('MOUNT_POINT', Path('/mnt')))
